{"version":3,"sources":["../src/common/constants.ts","../src/common/request.ts","../src/lib/auth.ts","../src/lib/payments.ts","../src/lib/escrow.ts","../src/lib/payment-schedules.ts","../src/lib/billing-keys.ts","../src/lib/cash-receipts.ts","../src/lib/identity-verifications.ts","../src/lib/pg-specific.ts","../src/index.ts"],"names":["DEFAULT_HOST","createRequestInstance","baseURL","Authorization","withoutAuthorization","defaultFunction","createClient","request_default","auth","_request","body","payments","options","paymentId","processedBody","params","_a","escrow","paymentSchedules","billingKeys","cashReceipts","identityVerifications","identityVerificationId","forSpecificPg","query","PortOne","initializationParams","_b","_c","token","src_default"],"mappings":";;;;;;;;;;AAAO,IAAMA,EAAe,wBCA5B,CAGO,SAASC,CACdC,CAAAA,CAAAA,CACAC,CACAC,CAAAA,CAAAA,CACwC,CACxC,GAAI,CAACD,CAAiBC,EAAAA,CAAAA,CAAsB,CAC1C,IAAMC,CAAAA,CAAkB,IAAM,CAC5B,MAAM,IAAI,KAAA,CACR,4EACF,CACF,EAEA,OAAO,CACL,GAAKA,CAAAA,CAAAA,CACL,IAAKA,CACL,CAAA,IAAA,CAAMA,CACN,CAAA,MAAA,CAAQA,EACR,OAASA,CAAAA,CAAAA,CACT,IAAMA,CAAAA,CAAAA,CACN,MAAOA,CACP,CAAA,KAAA,CAAOA,CACP,CAAA,GAAA,CAAK,IAAM,EAAC,CACZ,KAAO,CAAA,IAAM,EACf,CACF,CAEA,OAAOC,mBAAoB,CAAC,OAAA,CAASJ,CAAS,CAAA,OAAA,CAAS,CAAC,aAAAC,CAAAA,CAAa,CAAC,CAAC,CACzE,CAIA,IAAOI,CAAQN,CAAAA,CAAAA,CC1BR,IAAMO,CACXC,CAAAA,CAAAA,GASO,CAOL,KAAA,CACEC,GAEOD,CAAS,CAAA,IAAA,CAAK,mBAAqB,CAAA,CAAC,KAAAC,CAAI,CAAC,CAQlD,CAAA,YAAA,CACEA,GAEOD,CAAS,CAAA,IAAA,CAAK,gBAAkB,CAAA,CAAC,KAAAC,CAAI,CAAC,CAEjD,CAAA,CAAA,CCjCK,IAAMC,CAAW,CAAA,CACtBF,CACAG,CAAAA,CAAAA,IAuCO,CAOL,kBACEF,CAAAA,CAAAA,EAEG,CACH,GAAM,CAAC,SAAAG,CAAAA,CAAAA,CAAW,GAAGC,CAAa,EAAIJ,CAEtC,CAAA,OAAOD,CAAS,CAAA,IAAA,CAAK,qCAAsC,CACzD,MAAA,CAAQ,CACN,IAAA,CAAM,CAAC,SAAAI,CAAAA,CAAS,CAClB,CAAA,CACA,KAAM,CACJ,GAAGC,CACH,CAAA,OAAA,CAASA,EAAc,OAAWF,GAAAA,CAAAA,EAAA,IAAAA,CAAAA,KAAAA,CAAAA,CAAAA,CAAAA,CAAS,UAAW,KACxD,CAAA,CACF,CAAC,CACH,EAOA,UACEG,CAAAA,CAAAA,EAEON,CAAS,CAAA,GAAA,CAAI,wBAAyB,CAC3C,MAAA,CAAQ,CACN,IAAA,CAAM,CAAC,SAAWM,CAAAA,CAAAA,CAAO,SAAS,CAClC,CAAA,KAAA,CAAO,CAAC,OAASH,CAAAA,CAAAA,EAAA,IAAAA,CAAAA,KAAAA,CAAAA,CAAAA,CAAAA,CAAS,OAAO,CACnC,CACF,CAAC,CAAA,CAQH,YAAcF,CAAoD,EAAA,CA9FtE,IAAAM,CAAAA,CA+FM,OAAOP,CAAS,CAAA,GAAA,CAAI,WAAa,CAAA,CAC/B,KAAMC,CACF,CAAA,CACE,IAAM,CAAA,CACJ,GAAGA,CAAK,CAAA,IACV,CACA,CAAA,MAAA,CAAQ,CACN,GAAGA,CAAAA,CAAK,MACR,CAAA,OAAA,CAAA,CAAA,CAASM,EAAAN,CAAK,CAAA,MAAA,GAAL,IAAAM,CAAAA,KAAAA,CAAAA,CAAAA,CAAAA,CAAa,WAAWJ,CAAA,EAAA,IAAA,CAAA,KAAA,CAAA,CAAAA,CAAS,CAAA,OAAA,CAAA,EAAW,MACvD,CACF,CAAA,CACA,EACN,CAAC,CACH,CAAA,CASA,mBACEF,CAAAA,CAAAA,EAEOD,EAAS,GAAI,CAAA,qBAAA,CAAuB,CACzC,IAAA,CAAMC,EACF,CACE,GAAGA,CACH,CAAA,OAAA,CAASA,EAAK,OAAWE,GAAAA,CAAAA,EAAA,IAAAA,CAAAA,KAAAA,CAAAA,CAAAA,CAAAA,CAAS,UAAW,KAC/C,CAAA,CAAA,CACA,EACN,CAAC,CAQH,CAAA,aAAA,CACEF,CAEG,EAAA,CACH,GAAM,CAAC,SAAA,CAAAG,CAAW,CAAA,GAAGC,CAAa,CAAIJ,CAAAA,CAAAA,CAEtC,OAAOD,CAAAA,CAAS,KAAK,8BAAgC,CAAA,CACnD,MAAQ,CAAA,CACN,KAAM,CAAC,SAAA,CAAAI,CAAS,CAClB,EACA,IAAM,CAAA,CACJ,GAAGC,CAAAA,CACH,QAASA,CAAc,CAAA,OAAA,GAAWF,CAAA,EAAA,IAAA,CAAA,KAAA,CAAA,CAAAA,EAAS,OAAW,CAAA,EAAA,KAAA,CACxD,CACF,CAAC,CACH,CAOA,CAAA,iBAAA,CACEF,CAEG,EAAA,CACH,GAAM,CAAC,SAAA,CAAAG,CAAW,CAAA,GAAGC,CAAa,CAAIJ,CAAAA,CAAAA,CAEtC,OAAOD,CAAAA,CAAS,KAAK,mCAAqC,CAAA,CACxD,MAAQ,CAAA,CACN,KAAM,CAAC,SAAA,CAAAI,CAAS,CAClB,EACA,IAAM,CAAA,CACJ,GAAGC,CAAAA,CACH,QAASA,CAAc,CAAA,OAAA,GAAWF,CAAA,EAAA,IAAA,CAAA,KAAA,CAAA,CAAAA,EAAS,OAAW,CAAA,EAAA,KAAA,CACxD,CACF,CAAC,CACH,CAOA,CAAA,YAAA,CACEF,GAEG,CACH,GAAM,CAAC,SAAAG,CAAAA,CAAAA,CAAW,GAAGC,CAAa,EAAIJ,CAEtC,CAAA,OAAOD,CAAS,CAAA,IAAA,CAAK,gCAAiC,CACpD,MAAA,CAAQ,CACN,IAAA,CAAM,CAAC,SAAAI,CAAAA,CAAS,CAClB,CAAA,CACA,KAAM,CACJ,GAAGC,CACH,CAAA,OAAA,CAASA,EAAc,OAAWF,GAAAA,CAAAA,EAAA,IAAAA,CAAAA,KAAAA,CAAAA,CAAAA,CAAAA,CAAS,UAAW,KACxD,CAAA,CACF,CAAC,CACH,EAOA,UACEG,CAAAA,CAAAA,EAEON,CAAS,CAAA,IAAA,CAAK,8CAA+C,CAClE,MAAA,CAAQ,CACN,IAAA,CAAM,CAAC,SAAWM,CAAAA,CAAAA,CAAO,SAAS,CAAA,CAClC,MAAO,CAAC,OAAA,CAASH,CAAA,EAAA,IAAA,CAAA,KAAA,CAAA,CAAAA,EAAS,OAAO,CACnC,CACF,CAAC,EAQH,aACEF,CAAAA,CAAAA,EAEG,CACH,GAAM,CAAC,SAAAG,CAAAA,CAAAA,CAAW,GAAGC,CAAa,EAAIJ,CAEtC,CAAA,OAAOD,CAAS,CAAA,IAAA,CAAK,uCAAwC,CAC3D,MAAA,CAAQ,CACN,IAAA,CAAM,CAAC,SAAAI,CAAAA,CAAS,CAClB,CAAA,CACA,KAAM,CACJ,GAAGC,CACH,CAAA,OAAA,CAASA,EAAc,OAAWF,GAAAA,CAAAA,EAAA,IAAAA,CAAAA,KAAAA,CAAAA,CAAAA,CAAAA,CAAS,UAAW,KACxD,CAAA,CACF,CAAC,CACH,EASA,oBACEF,CAAAA,CAAAA,EAEG,CACH,GAAM,CAAC,SAAAG,CAAAA,CAAAA,CAAW,GAAGC,CAAa,EAAIJ,CAEtC,CAAA,OAAOD,CAAS,CAAA,IAAA,CAAK,+CAAgD,CACnE,MAAA,CAAQ,CACN,IAAA,CAAM,CAAC,SAAAI,CAAAA,CAAS,CAClB,CAAA,CACA,KAAM,CACJ,GAAGC,CACH,CAAA,OAAA,CAASA,EAAc,OAAWF,GAAAA,CAAAA,EAAA,IAAAA,CAAAA,KAAAA,CAAAA,CAAAA,CAAAA,CAAS,UAAW,KACxD,CAAA,CACF,CAAC,CACH,CACF,CCzPK,CAAA,CAAA,IAAMK,CAAS,CAAA,CACpBR,EACAG,CAeO,IAAA,CAOL,uBACEF,CAAAA,CAAAA,EAEG,CACH,GAAM,CAAC,SAAAG,CAAAA,CAAAA,CAAW,GAAGC,CAAa,CAAA,CAAIJ,EAEtC,OAAOD,CAAAA,CAAS,KAAK,wCAA0C,CAAA,CAC7D,MAAQ,CAAA,CACN,KAAM,CAAC,SAAA,CAAAI,CAAS,CAClB,EACA,IAAM,CAAA,CACJ,GAAGC,CAAAA,CACH,QAASA,CAAc,CAAA,OAAA,GAAWF,CAAA,EAAA,IAAA,CAAA,KAAA,CAAA,CAAAA,EAAS,OAAW,CAAA,EAAA,KAAA,CACxD,CACF,CAAC,CACH,CAOA,CAAA,qBAAA,CACEF,CAEG,EAAA,CACH,GAAM,CAAC,SAAA,CAAAG,CAAW,CAAA,GAAGC,CAAa,CAAIJ,CAAAA,CAAAA,CAEtC,OAAOD,CAAAA,CAAS,MAAM,wCAA0C,CAAA,CAC9D,MAAQ,CAAA,CACN,KAAM,CAAC,SAAA,CAAAI,CAAS,CAClB,EACA,IAAM,CAAA,CACJ,GAAGC,CAAAA,CACH,QAASA,CAAc,CAAA,OAAA,GAAWF,CAAA,EAAA,IAAA,CAAA,KAAA,CAAA,CAAAA,EAAS,OAAW,CAAA,EAAA,KAAA,CACxD,CACF,CAAC,CACH,CAOA,CAAA,aAAA,CACEF,CAEG,EAAA,CACH,GAAM,CAAC,SAAA,CAAAG,CAAW,CAAA,GAAGC,CAAa,CAAIJ,CAAAA,CAAAA,CAEtC,OAAOD,CAAAA,CAAS,KAAK,uCAAyC,CAAA,CAC5D,MAAQ,CAAA,CACN,KAAM,CAAC,SAAA,CAAAI,CAAS,CAClB,EACA,IAAM,CAAA,CACJ,GAAGC,CAAAA,CACH,QAASA,CAAc,CAAA,OAAA,GAAWF,CAAA,EAAA,IAAA,CAAA,KAAA,CAAA,CAAAA,EAAS,OAAW,CAAA,EAAA,KAAA,CACxD,CACF,CAAC,CACH,CACF,CAAA,CAAA,CCpFK,IAAMM,CAAAA,CAAmB,CAC9BT,CACAG,CAAAA,CAAAA,IAgBO,CAOL,kBAAA,CACEG,GAEON,CAAS,CAAA,GAAA,CAAI,wCAA0C,CAAA,CAC5D,OAAQ,CACN,IAAA,CAAM,CAAC,iBAAA,CAAmBM,EAAO,iBAAiB,CAAA,CAClD,KAAO,CAAA,CAAC,QAASH,CAAA,EAAA,IAAA,CAAA,KAAA,CAAA,CAAAA,CAAS,CAAA,OAAO,CACnC,CACF,CAAC,CAQH,CAAA,mBAAA,CACEF,GACG,CAnDT,IAAAM,CAoDM,CAAA,IAAMF,EAAgBJ,CAClB,CAAA,CACE,IAAM,CAAA,CACJ,GAAGA,CAAK,CAAA,IACV,CACA,CAAA,MAAA,CAAQ,CACN,GAAGA,CAAAA,CAAK,OACR,OAASM,CAAAA,CAAAA,CAAAA,CAAAA,CAAAN,EAAK,MAAL,GAAA,IAAA,CAAA,KAAA,CAAA,CAAAM,CAAa,CAAA,OAAA,IAAWJ,GAAA,IAAAA,CAAAA,KAAAA,CAAAA,CAAAA,CAAAA,CAAS,OAAW,CAAA,EAAA,KAAA,CACvD,CACF,CACA,CAAA,EAEJ,CAAA,OAAOH,EAAS,GAAI,CAAA,oBAAA,CAAsB,CACxC,IAAA,CAAMK,GAAiB,EACzB,CAAC,CACH,EAOA,qBACEJ,CAAAA,CAAAA,EAEOD,CAAS,CAAA,MAAA,CAAO,qBAAsB,CAC3C,IAAA,CAAM,CACJ,GAAGC,EACH,OAASA,CAAAA,CAAAA,CAAK,OAAWE,GAAAA,CAAAA,EAAA,YAAAA,CAAS,CAAA,OAAA,CAAA,EAAW,KAC/C,CAAA,CACF,CAAC,CAQH,CAAA,eAAA,CACEF,CAEG,EAAA,CACH,GAAM,CAAC,SAAA,CAAAG,CAAW,CAAA,GAAGC,CAAa,CAAIJ,CAAAA,CAAAA,CAEtC,OAAOD,CAAAA,CAAS,KAAK,gCAAkC,CAAA,CACrD,MAAQ,CAAA,CACN,KAAM,CAAC,SAAA,CAAAI,CAAS,CAClB,EACA,IAAM,CAAA,CACJ,GAAGC,CAAAA,CACH,QAAS,CACP,GAAGA,CAAc,CAAA,OAAA,CACjB,QACEA,CAAc,CAAA,OAAA,CAAQ,OAAWF,GAAAA,CAAAA,EAAA,YAAAA,CAAS,CAAA,OAAA,CAAA,EAAW,KACzD,CAAA,CACF,CACF,CAAC,CACH,CACF,CAAA,CAAA,CCtGK,IAAMO,CAAc,CAAA,CACzBV,CACAG,CAAAA,CAAAA,IAeO,CAOL,aACEG,CAAAA,CAAAA,EAEON,CAAS,CAAA,GAAA,CAAI,6BAA8B,CAChD,MAAA,CAAQ,CACN,IAAA,CAAM,CAAC,UAAYM,CAAAA,CAAAA,CAAO,UAAU,CAAA,CACpC,MAAO,CAAC,OAAA,CAASH,CAAA,EAAA,IAAA,CAAA,KAAA,CAAA,CAAAA,EAAS,OAAO,CACnC,CACF,CAAC,EAQH,gBACEG,CAAAA,CAAAA,EAEON,CAAS,CAAA,MAAA,CAAO,6BAA8B,CACnD,MAAA,CAAQ,CACN,IAAA,CAAM,CAAC,UAAYM,CAAAA,CAAAA,CAAO,UAAU,CAAA,CACpC,MAAO,CAAC,OAAA,CAASH,CAAA,EAAA,IAAA,CAAA,KAAA,CAAA,CAAAA,EAAS,OAAO,CACnC,CACF,CAAC,EAQH,cAAiBF,CAAAA,CAAAA,EAA0D,CAhE/E,IAAAM,EAiEM,OAAOP,CAAAA,CAAS,IAAI,eAAiB,CAAA,CACnC,KAAM,CACJ,GAAGC,CACH,CAAA,MAAA,CAAQ,CACN,GAAGA,CAAAA,CAAK,MACR,CAAA,OAAA,CAAA,CAAA,CAASM,EAAAN,CAAK,CAAA,MAAA,GAAL,IAAAM,CAAAA,KAAAA,CAAAA,CAAAA,CAAAA,CAAa,WAAWJ,CAAA,EAAA,IAAA,CAAA,KAAA,CAAA,CAAAA,CAAS,CAAA,OAAA,CAAA,EAAW,MACvD,CACF,CACF,CAAC,CACH,EAOA,eACEF,CAAAA,CAAAA,EAEOD,CAAS,CAAA,IAAA,CAAK,gBAAiB,CACpC,IAAA,CAAM,CACJ,GAAGC,EACH,OAASA,CAAAA,CAAAA,CAAK,OAAWE,GAAAA,CAAAA,EAAA,YAAAA,CAAS,CAAA,OAAA,CAAA,EAAW,KAC/C,CAAA,CACF,CAAC,CAEL,CAAA,CAAA,CCnFK,IAAMQ,CAAAA,CAAe,CAC1BX,CACAG,CAAAA,CAAAA,IAYO,CAOL,cAAA,CACEG,GAEON,CAAS,CAAA,GAAA,CAAI,oCAAsC,CAAA,CACxD,OAAQ,CACN,IAAA,CAAM,CAAC,SAAA,CAAWM,EAAO,SAAS,CAAA,CAClC,KAAO,CAAA,CAAC,QAASH,CAAA,EAAA,IAAA,CAAA,KAAA,CAAA,CAAAA,CAAS,CAAA,OAAO,CACnC,CACF,CAAC,CAQH,CAAA,gBAAA,CACEF,GAEOD,CAAS,CAAA,IAAA,CAAK,gBAAkB,CAAA,CACrC,KAAM,CACJ,GAAGC,CACH,CAAA,OAAA,CAASA,EAAK,OAAWE,GAAAA,CAAAA,EAAA,IAAAA,CAAAA,KAAAA,CAAAA,CAAAA,CAAAA,CAAS,UAAW,KAC/C,CAAA,CACF,CAAC,CAAA,CAQH,kBACEG,CAEON,EAAAA,CAAAA,CAAS,IAAK,CAAA,2CAAA,CAA6C,CAChE,MAAQ,CAAA,CACN,IAAM,CAAA,CAAC,UAAWM,CAAO,CAAA,SAAS,CAClC,CAAA,KAAA,CAAO,CAAC,OAASH,CAAAA,CAAAA,EAAA,IAAAA,CAAAA,KAAAA,CAAAA,CAAAA,CAAAA,CAAS,OAAO,CACnC,CACF,CAAC,CAEL,GC/DK,IAAMS,CAAAA,CAAwB,CACnCZ,CAAAA,CACAG,KAiBO,CAOL,uBAAA,CACEG,CAEON,EAAAA,CAAAA,CAAS,IAAI,kDAAoD,CAAA,CACtE,MAAQ,CAAA,CACN,KAAM,CAAC,sBAAA,CAAwBM,CAAO,CAAA,sBAAsB,EAC5D,KAAO,CAAA,CAAC,OAASH,CAAAA,CAAAA,EAAA,YAAAA,CAAS,CAAA,OAAO,CACnC,CACF,CAAC,CAQH,CAAA,wBAAA,CACEF,GAEG,CACH,GAAM,CAAC,sBAAAY,CAAAA,CAAAA,CAAwB,GAAGR,CAAa,EAAIJ,CAEnD,CAAA,OAAOD,CAAS,CAAA,IAAA,CACd,wDACA,CACE,MAAA,CAAQ,CACN,IAAA,CAAM,CAAC,sBAAAa,CAAAA,CAAsB,CAC/B,CAAA,CACA,KAAM,CACJ,GAAGR,CACH,CAAA,OAAA,CAASA,EAAc,OAAWF,GAAAA,CAAAA,EAAA,IAAAA,CAAAA,KAAAA,CAAAA,CAAAA,CAAAA,CAAS,UAAW,KACxD,CAAA,CACF,CACF,CACF,EAOA,2BACEF,CAAAA,CAAAA,EAEG,CACH,GAAM,CAAC,sBAAAY,CAAAA,CAAAA,CAAwB,GAAGR,CAAa,EAAIJ,CAEnD,CAAA,OAAOD,CAAS,CAAA,IAAA,CACd,2DACA,CACE,MAAA,CAAQ,CACN,IAAA,CAAM,CAAC,sBAAAa,CAAAA,CAAsB,CAC/B,CAAA,CACA,KAAM,CACJ,GAAGR,CACH,CAAA,OAAA,CAASA,EAAc,OAAWF,GAAAA,CAAAA,EAAA,IAAAA,CAAAA,KAAAA,CAAAA,CAAAA,CAAAA,CAAS,UAAW,KACxD,CAAA,CACF,CACF,CACF,EAOA,0BACEG,CAAAA,CAAAA,EAEON,CAAS,CAAA,IAAA,CACd,0DACA,CACE,MAAA,CAAQ,CACN,IAAA,CAAM,CAAC,sBAAwBM,CAAAA,CAAAA,CAAO,sBAAsB,CAAA,CAC5D,MAAO,CAAC,OAAA,CAASH,CAAA,EAAA,IAAA,CAAA,KAAA,CAAA,CAAAA,EAAS,OAAO,CACnC,CACF,CACF,CAEJ,CCzGK,CAAA,CAAA,IAAMW,CACXd,CAAAA,CAAAA,GAMO,CAQL,uBACEe,CAAAA,CAAAA,EAEOf,CAAS,CAAA,GAAA,CAAI,0BAA2B,CAC7C,MAAA,CAAQ,CAAC,KAAA,CAAAe,CAAK,CAChB,CAAC,CAEL,CAAA,CAAA,KCHWC,CAAN,CAAA,KAAc,CAqBnB,WAAA,CAAYb,EAA0B,CACpC,IAAA,CAAK,IAAOA,CAAAA,CAAAA,CAAAA,EAAA,YAAAA,CAAS,CAAA,IAAA,GAAQZ,CAC7B,CAAA,IAAA,CAAK,SAAWO,CACd,CAAA,IAAA,CAAK,IACL,CAAA,KAAA,CAAA,CACA,EACF,CAEA,CAAA,IAAA,CAAK,KAAM,GACb,CAEQ,KAAQ,EAAA,CAEd,IAAMmB,CAAAA,CAAuB,CAC3B,OAAS,CAAA,IAAA,CAAK,OAAW,EAAA,KAAA,CAC3B,EAEA,IAAK,CAAA,IAAA,CAAOlB,EAAK,IAAK,CAAA,QAAQ,EAC9B,IAAK,CAAA,QAAA,CAAWG,CAAS,CAAA,IAAA,CAAK,SAAUe,CAAoB,CAAA,CAC5D,IAAK,CAAA,MAAA,CAAST,EAAO,IAAK,CAAA,QAAA,CAAUS,CAAoB,CAAA,CACxD,KAAK,gBAAmBR,CAAAA,CAAAA,CACtB,IAAK,CAAA,QAAA,CACLQ,CACF,CACA,CAAA,IAAA,CAAK,WAAcP,CAAAA,CAAAA,CAAY,KAAK,QAAUO,CAAAA,CAAoB,CAClE,CAAA,IAAA,CAAK,aAAeN,CAAa,CAAA,IAAA,CAAK,QAAUM,CAAAA,CAAoB,EACpE,IAAK,CAAA,qBAAA,CAAwBL,CAC3B,CAAA,IAAA,CAAK,SACLK,CACF,CAAA,CACA,IAAK,CAAA,aAAA,CAAgBH,EAAc,IAAK,CAAA,QAAQ,EAClD,CAEA,MAAa,KAAMX,CAAAA,CAAAA,CAMhB,CAvFL,IAAAI,EAAAW,CAAAC,CAAAA,CAAAA,CA8FI,GAFA,IAAA,CAAK,QAAUhB,CAAQ,CAAA,OAAA,CAEnBA,CAAQ,CAAA,aAAA,CAAc,OAAS,cAAgB,CAAA,CACjD,IAAMiB,CAAAA,CAAQ,MAAM,IAAK,CAAA,QAAA,CAAS,IAAK,CAAA,mBAAA,CAAqB,CAC1D,IAAM,CAAA,CACJ,SAAWjB,CAAAA,CAAAA,CAAQ,cAAc,MACnC,CACF,CAAC,CAAA,CAED,GAAI,EAACI,CAAAA,CAAAA,CAAAa,CAAM,CAAA,IAAA,GAAN,MAAAb,CAAY,CAAA,WAAA,CAAA,EAAea,CAAM,CAAA,KAAA,CACpC,MAAM,IAAI,KAAA,CACRA,CAAM,CAAA,KAAA,CACF,IAAGF,CAAAE,CAAAA,CAAAA,CAAM,KAAN,GAAA,IAAA,CAAA,KAAA,CAAA,CAAAF,EAAa,IAAI,CAAA,EAAA,EAAA,CAAKC,CAAAC,CAAAA,CAAAA,CAAM,QAAN,IAAAD,CAAAA,KAAAA,CAAAA,CAAAA,CAAAA,CAAa,OAAO,CAAA,CAAA,CAC7C,4BACN,CAEF,CAAA,IAAA,CAAK,aAAgB,CAAA,CACnB,OAAQC,CAAM,CAAA,IAAA,CAAK,WACnB,CAAA,IAAA,CAAMjB,EAAQ,aAAc,CAAA,IAAA,EAAQ,QACtC,CAAA,CAEA,KAAK,QAAWL,CAAAA,CAAAA,CACd,IAAK,CAAA,IAAA,CACL,UAAU,IAAK,CAAA,aAAA,CAAc,MAAM,CAAA,CACrC,EACF,CACE,KAAA,IAAA,CAAK,aAAgBK,CAAAA,CAAAA,CAAQ,cAC7B,IAAK,CAAA,QAAA,CAAWL,CACd,CAAA,IAAA,CAAK,KACL,CAAW,QAAA,EAAA,IAAA,CAAK,aAAc,CAAA,MAAM,EACtC,CAGF,CAAA,IAAA,CAAK,QACP,CACF,EAEOuB,CAAQL,CAAAA","file":"index.js","sourcesContent":["export const DEFAULT_HOST = 'https://api.portone.io';\n","import createClient from 'openapi-fetch';\nimport type {paths} from '../types/v2'; // generated by openapi-typescript\n\nexport function createRequestInstance(\n  baseURL: string,\n  Authorization?: string,\n  withoutAuthorization?: boolean\n): ReturnType<typeof createClient<paths>> {\n  if (!Authorization && withoutAuthorization) {\n    const defaultFunction = () => {\n      throw new Error(\n        'PortOne SDK is not authorized yet. Please run login function to authorize.'\n      );\n    };\n\n    return {\n      GET: defaultFunction,\n      PUT: defaultFunction,\n      POST: defaultFunction,\n      DELETE: defaultFunction,\n      OPTIONS: defaultFunction,\n      HEAD: defaultFunction,\n      PATCH: defaultFunction,\n      TRACE: defaultFunction,\n      use: () => {},\n      eject: () => {},\n    };\n  }\n\n  return createClient<paths>({baseUrl: baseURL, headers: {Authorization}});\n}\n\nexport type RequestInstance = ReturnType<typeof createRequestInstance>;\n\nexport default createRequestInstance;\n","import type {RequestInstance} from '../common/request';\nimport type {paths} from '../types/v2'; // generated by openapi-typescript\n\n/**\n * 인증 관련 API\n *\n * @description 인증과 관련된 API 기능을 제공합니다.\n */\nexport const auth = (\n  _request: RequestInstance\n): {\n  token: (\n    body: paths['/login/api-secret']['post']['requestBody']['content']['application/json']\n  ) => ReturnType<RequestInstance['POST']>;\n  tokenRefresh: (\n    body: paths['/token/refresh']['post']['requestBody']['content']['application/json']\n  ) => ReturnType<RequestInstance['POST']>;\n} => {\n  return {\n    /**\n     * API secret 를 사용한 토큰 발급\n     *\n     * @description API secret 를 사용한 토큰 발급\n     * API secret 를 통해 API 인증에 사용할 토큰을 가져옵니다.\n     */\n    token: (\n      body: paths['/login/api-secret']['post']['requestBody']['content']['application/json']\n    ) => {\n      return _request.POST('/login/api-secret', {body});\n    },\n    /**\n     * 토큰 갱신\n     *\n     * @description 토큰 갱신\n     * 리프레시 토큰을 사용해 유효기간이 연장된 새로운 토큰을 재발급합니다.\n     */\n    tokenRefresh: (\n      body: paths['/token/refresh']['post']['requestBody']['content']['application/json']\n    ) => {\n      return _request.POST('/token/refresh', {body});\n    },\n  };\n};\n","import type {RequestInstance} from '../common/request';\nimport type {components, paths} from '../types/v2'; // generated by openapi-typescript\n\n/**\n * 결제 관련 API\n *\n * @description 결제와 관련된 API 기능을 제공합니다.\n */\nexport const payments = (\n  _request: RequestInstance,\n  options?: {storeId?: string}\n): {\n  preRegisterPayment: (\n    body: paths['/payments/{paymentId}/pre-register']['post']['parameters']['path'] &\n      paths['/payments/{paymentId}/pre-register']['post']['requestBody']['content']['application/json']\n  ) => ReturnType<RequestInstance['POST']>;\n  getPayment: (\n    params: paths['/payments/{paymentId}']['get']['parameters']['path']\n  ) => ReturnType<RequestInstance['GET']>;\n  getPayments: (\n    body?: components['schemas']['GetPaymentsBody']\n  ) => ReturnType<RequestInstance['GET']>;\n  getPaymentsByCursor: (\n    body?: components['schemas']['GetAllPaymentsByCursorBody']\n  ) => ReturnType<RequestInstance['GET']>;\n  cancelPayment: (\n    body: paths['/payments/{paymentId}/cancel']['post']['parameters']['path'] &\n      paths['/payments/{paymentId}/cancel']['post']['requestBody']['content']['application/json']\n  ) => ReturnType<RequestInstance['POST']>;\n  payWithBillingKey: (\n    body: paths['/payments/{paymentId}/billing-key']['post']['parameters']['path'] &\n      paths['/payments/{paymentId}/billing-key']['post']['requestBody']['content']['application/json']\n  ) => ReturnType<RequestInstance['POST']>;\n  keyInPayment: (\n    body: paths['/payments/{paymentId}/instant']['post']['parameters']['path'] &\n      paths['/payments/{paymentId}/instant']['post']['requestBody']['content']['application/json']\n  ) => ReturnType<RequestInstance['POST']>;\n  closeVbank: (\n    params: paths['/payments/{paymentId}/virtual-account/close']['post']['parameters']['path']\n  ) => ReturnType<RequestInstance['POST']>;\n  resendWebhook: (\n    body: paths['/payments/{paymentId}/resend-webhook']['post']['parameters']['path'] &\n      paths['/payments/{paymentId}/resend-webhook']['post']['requestBody']['content']['application/json']\n  ) => ReturnType<RequestInstance['POST']>;\n  registerStoreReceipt: (\n    body: paths['/payments/{paymentId}/register-store-receipt']['post']['parameters']['path'] &\n      paths['/payments/{paymentId}/register-store-receipt']['post']['requestBody']['content']['application/json']\n  ) => ReturnType<RequestInstance['POST']>;\n} => {\n  return {\n    /**\n     * 결제 정보 사전 등록\n     *\n     * @description 결제 정보 사전 등록\n     * 결제 정보를 사전 등록합니다.\n     */\n    preRegisterPayment: (\n      body: paths['/payments/{paymentId}/pre-register']['post']['parameters']['path'] &\n        paths['/payments/{paymentId}/pre-register']['post']['requestBody']['content']['application/json']\n    ) => {\n      const {paymentId, ...processedBody} = body;\n\n      return _request.POST('/payments/{paymentId}/pre-register', {\n        params: {\n          path: {paymentId},\n        },\n        body: {\n          ...processedBody,\n          storeId: processedBody.storeId || options?.storeId || undefined,\n        },\n      });\n    },\n    /**\n     * 결제 단건 조회\n     *\n     * @description 결제 단건 조회\n     * 주어진 아이디에 대응되는 결제 건을 조회합니다.\n     */\n    getPayment: (\n      params: paths['/payments/{paymentId}']['get']['parameters']['path']\n    ) => {\n      return _request.GET('/payments/{paymentId}', {\n        params: {\n          path: {paymentId: params.paymentId},\n          query: {storeId: options?.storeId},\n        },\n      });\n    },\n    /**\n     * 결제 다건 조회(페이지 기반)\n     *\n     * @description 결제 다건 조회(페이지 기반)\n     * 주어진 조건에 맞는 결제 건들을 페이지 기반으로 조회합니다.\n     */\n    getPayments: (body?: components['schemas']['GetPaymentsBody']) => {\n      return _request.GET('/payments', {\n        body: body\n          ? {\n              page: {\n                ...body.page,\n              },\n              filter: {\n                ...body.filter,\n                storeId: body.filter?.storeId || options?.storeId || undefined,\n              },\n            }\n          : {},\n      });\n    },\n    /**\n     * 결제 대용량 다건 조회(커서 기반)\n     *\n     * @description 결제 대용량 다건 조회(커서 기반)\n     * 기간 내 모든 결제 건을 커서 기반으로 조회합니다. 결제 건의 생성일시를 기준으로 주어진 기간 내 존재하는 모든 결제 건이 조회됩니다.\n     *\n     * @unstable 이 API는 현재 테스트 중인 API로, 불안정할 수 있습니다.\n     */\n    getPaymentsByCursor: (\n      body?: components['schemas']['GetAllPaymentsByCursorBody']\n    ) => {\n      return _request.GET('/payments-by-cursor', {\n        body: body\n          ? {\n              ...body,\n              storeId: body.storeId || options?.storeId || undefined,\n            }\n          : {},\n      });\n    },\n    /**\n     * 결제 취소\n     *\n     * @description 결제 취소\n     * 결제 취소를 요청합니다.\n     */\n    cancelPayment: (\n      body: paths['/payments/{paymentId}/cancel']['post']['parameters']['path'] &\n        paths['/payments/{paymentId}/cancel']['post']['requestBody']['content']['application/json']\n    ) => {\n      const {paymentId, ...processedBody} = body;\n\n      return _request.POST('/payments/{paymentId}/cancel', {\n        params: {\n          path: {paymentId},\n        },\n        body: {\n          ...processedBody,\n          storeId: processedBody.storeId || options?.storeId || undefined,\n        },\n      });\n    },\n    /**\n     * 빌링키 결제\n     *\n     * @description 빌링키 결제\n     * 빌링키로 결제를 진행합니다.\n     */\n    payWithBillingKey: (\n      body: paths['/payments/{paymentId}/billing-key']['post']['parameters']['path'] &\n        paths['/payments/{paymentId}/billing-key']['post']['requestBody']['content']['application/json']\n    ) => {\n      const {paymentId, ...processedBody} = body;\n\n      return _request.POST('/payments/{paymentId}/billing-key', {\n        params: {\n          path: {paymentId},\n        },\n        body: {\n          ...processedBody,\n          storeId: processedBody.storeId || options?.storeId || undefined,\n        },\n      });\n    },\n    /**\n     * 수기 결제\n     *\n     * @description 수기 결제\n     * 수기 결제를 진행합니다.\n     */\n    keyInPayment: (\n      body: paths['/payments/{paymentId}/instant']['post']['parameters']['path'] &\n        paths['/payments/{paymentId}/instant']['post']['requestBody']['content']['application/json']\n    ) => {\n      const {paymentId, ...processedBody} = body;\n\n      return _request.POST('/payments/{paymentId}/instant', {\n        params: {\n          path: {paymentId},\n        },\n        body: {\n          ...processedBody,\n          storeId: processedBody.storeId || options?.storeId || undefined,\n        },\n      });\n    },\n    /**\n     * 가상계좌 말소\n     *\n     * @description 가상계좌 말소\n     * 발급된 가상계좌를 말소합니다.\n     */\n    closeVbank: (\n      params: paths['/payments/{paymentId}/virtual-account/close']['post']['parameters']['path']\n    ) => {\n      return _request.POST('/payments/{paymentId}/virtual-account/close', {\n        params: {\n          path: {paymentId: params.paymentId},\n          query: {storeId: options?.storeId},\n        },\n      });\n    },\n    /**\n     * 웹훅 재발송\n     *\n     * @description 웹훅 재발송\n     * 웹훅을 재발송합니다.\n     */\n    resendWebhook: (\n      body: paths['/payments/{paymentId}/resend-webhook']['post']['parameters']['path'] &\n        paths['/payments/{paymentId}/resend-webhook']['post']['requestBody']['content']['application/json']\n    ) => {\n      const {paymentId, ...processedBody} = body;\n\n      return _request.POST('/payments/{paymentId}/resend-webhook', {\n        params: {\n          path: {paymentId},\n        },\n        body: {\n          ...processedBody,\n          storeId: processedBody.storeId || options?.storeId || undefined,\n        },\n      });\n    },\n    /**\n     * 영수증 내 하위 상점 거래 등록 API\n     *\n     * @description 영수증 내 하위 상점 거래 등록 API\n     * 결제 내역 매출전표에 하위 상점의 거래를 등록할 수 있는 API입니다.\n     * 지원되는 PG사:\n     * KG이니시스(이용 전 콘솔 -&gt; 결제연동 탭에서 INIApi Key 등록 필요)\n     */\n    registerStoreReceipt: (\n      body: paths['/payments/{paymentId}/register-store-receipt']['post']['parameters']['path'] &\n        paths['/payments/{paymentId}/register-store-receipt']['post']['requestBody']['content']['application/json']\n    ) => {\n      const {paymentId, ...processedBody} = body;\n\n      return _request.POST('/payments/{paymentId}/register-store-receipt', {\n        params: {\n          path: {paymentId},\n        },\n        body: {\n          ...processedBody,\n          storeId: processedBody.storeId || options?.storeId || undefined,\n        },\n      });\n    },\n  };\n};\n","import type {RequestInstance} from '../common/request';\nimport type {paths} from '../types/v2'; // generated by openapi-typescript\n\n/**\n * 에스크로 관련 API\n *\n * @description 에스크로와 관련된 API 기능을 제공합니다.\n */\nexport const escrow = (\n  _request: RequestInstance,\n  options?: {storeId?: string}\n): {\n  registerEscrowLogistics: (\n    body: paths['/payments/{paymentId}/escrow/logistics']['post']['parameters']['path'] &\n      paths['/payments/{paymentId}/escrow/logistics']['post']['requestBody']['content']['application/json']\n  ) => ReturnType<RequestInstance['POST']>;\n  updateEscrowLogistics: (\n    body: paths['/payments/{paymentId}/escrow/logistics']['patch']['parameters']['path'] &\n      paths['/payments/{paymentId}/escrow/logistics']['patch']['requestBody']['content']['application/json']\n  ) => ReturnType<RequestInstance['PATCH']>;\n  confirmEscrow: (\n    body: paths['/payments/{paymentId}/escrow/complete']['post']['parameters']['path'] &\n      paths['/payments/{paymentId}/escrow/complete']['post']['requestBody']['content']['application/json']\n  ) => ReturnType<RequestInstance['POST']>;\n} => {\n  return {\n    /**\n     * 에스크로 배송 정보 등록\n     *\n     * @description 에스크로 배송 정보 등록\n     * 에스크로 배송 정보를 등록합니다.\n     */\n    registerEscrowLogistics: (\n      body: paths['/payments/{paymentId}/escrow/logistics']['post']['parameters']['path'] &\n        paths['/payments/{paymentId}/escrow/logistics']['post']['requestBody']['content']['application/json']\n    ) => {\n      const {paymentId, ...processedBody} = body;\n\n      return _request.POST('/payments/{paymentId}/escrow/logistics', {\n        params: {\n          path: {paymentId},\n        },\n        body: {\n          ...processedBody,\n          storeId: processedBody.storeId || options?.storeId || undefined,\n        },\n      });\n    },\n    /**\n     * 에스크로 배송 정보 수정\n     *\n     * @description 에스크로 배송 정보 수정\n     * 에스크로 배송 정보를 수정합니다.\n     */\n    updateEscrowLogistics: (\n      body: paths['/payments/{paymentId}/escrow/logistics']['patch']['parameters']['path'] &\n        paths['/payments/{paymentId}/escrow/logistics']['patch']['requestBody']['content']['application/json']\n    ) => {\n      const {paymentId, ...processedBody} = body;\n\n      return _request.PATCH('/payments/{paymentId}/escrow/logistics', {\n        params: {\n          path: {paymentId},\n        },\n        body: {\n          ...processedBody,\n          storeId: processedBody.storeId || options?.storeId || undefined,\n        },\n      });\n    },\n    /**\n     * 에스크로 구매 확정\n     *\n     * @description 에스크로 구매 확정\n     * 에스크로 결제를 구매 확정 처리합니다\n     */\n    confirmEscrow: (\n      body: paths['/payments/{paymentId}/escrow/complete']['post']['parameters']['path'] &\n        paths['/payments/{paymentId}/escrow/complete']['post']['requestBody']['content']['application/json']\n    ) => {\n      const {paymentId, ...processedBody} = body;\n\n      return _request.POST('/payments/{paymentId}/escrow/complete', {\n        params: {\n          path: {paymentId},\n        },\n        body: {\n          ...processedBody,\n          storeId: processedBody.storeId || options?.storeId || undefined,\n        },\n      });\n    },\n  };\n};\n","import type {RequestInstance} from '../common/request';\nimport type {components, paths} from '../types/v2'; // generated by openapi-typescript\n\n/**\n * 결제 예약 관련 API\n *\n * @description 결제 예약과 관련된 API 기능을 제공합니다.\n */\nexport const paymentSchedules = (\n  _request: RequestInstance,\n  options?: {storeId?: string}\n): {\n  getPaymentSchedule: (\n    params: paths['/payment-schedules/{paymentScheduleId}']['get']['parameters']['path']\n  ) => ReturnType<RequestInstance['GET']>;\n  getPaymentSchedules: (\n    body?: components['schemas']['GetPaymentSchedulesBody']\n  ) => ReturnType<RequestInstance['GET']>;\n  revokePaymentSchedule: (\n    body: components['schemas']['RevokePaymentSchedulesBody']\n  ) => ReturnType<RequestInstance['DELETE']>;\n  schedulePayment: (\n    body: paths['/payments/{paymentId}/schedule']['post']['parameters']['path'] &\n      paths['/payments/{paymentId}/schedule']['post']['requestBody']['content']['application/json']\n  ) => ReturnType<RequestInstance['POST']>;\n} => {\n  return {\n    /**\n     * 결제 예약 단건 조회\n     *\n     * @description 결제 예약 단건 조회\n     * 주어진 아이디에 대응되는 결제 예약 건을 조회합니다.\n     */\n    getPaymentSchedule: (\n      params: paths['/payment-schedules/{paymentScheduleId}']['get']['parameters']['path']\n    ) => {\n      return _request.GET('/payment-schedules/{paymentScheduleId}', {\n        params: {\n          path: {paymentScheduleId: params.paymentScheduleId},\n          query: {storeId: options?.storeId},\n        },\n      });\n    },\n    /**\n     * 결제 예약 다건 조회\n     *\n     * @description 결제 예약 다건 조회\n     * 주어진 조건에 맞는 결제 예약 건들을 조회합니다.\n     */\n    getPaymentSchedules: (\n      body?: components['schemas']['GetPaymentSchedulesBody']\n    ) => {\n      const processedBody = body\n        ? {\n            page: {\n              ...body.page,\n            },\n            filter: {\n              ...body.filter,\n              storeId: body.filter?.storeId || options?.storeId || undefined,\n            },\n          }\n        : {};\n\n      return _request.GET('/payment-schedules', {\n        body: processedBody || {},\n      });\n    },\n    /**\n     * 결제 예약 취소\n     *\n     * @description 결제 예약 취소\n     * 결제 예약 건을 취소합니다.\n     */\n    revokePaymentSchedule: (\n      body: components['schemas']['RevokePaymentSchedulesBody']\n    ) => {\n      return _request.DELETE('/payment-schedules', {\n        body: {\n          ...body,\n          storeId: body.storeId || options?.storeId || undefined,\n        },\n      });\n    },\n    /**\n     * 결제 예약\n     *\n     * @description 결제 예약\n     * 결제를 예약합니다.\n     */\n    schedulePayment: (\n      body: paths['/payments/{paymentId}/schedule']['post']['parameters']['path'] &\n        paths['/payments/{paymentId}/schedule']['post']['requestBody']['content']['application/json']\n    ) => {\n      const {paymentId, ...processedBody} = body;\n\n      return _request.POST('/payments/{paymentId}/schedule', {\n        params: {\n          path: {paymentId},\n        },\n        body: {\n          ...processedBody,\n          payment: {\n            ...processedBody.payment,\n            storeId:\n              processedBody.payment.storeId || options?.storeId || undefined,\n          },\n        },\n      });\n    },\n  };\n};\n","import type {RequestInstance} from '../common/request';\nimport type {components, paths} from '../types/v2'; // generated by openapi-typescript\n\n/**\n * 빌링키 관련 API\n *\n * @description 빌링키와 관련된 API 기능을 제공합니다.\n */\nexport const billingKeys = (\n  _request: RequestInstance,\n  options?: {storeId?: string}\n): {\n  getBillingKey: (\n    params: paths['/billing-keys/{billingKey}']['get']['parameters']['path']\n  ) => ReturnType<RequestInstance['GET']>;\n  deleteBillingKey: (\n    params: paths['/billing-keys/{billingKey}']['delete']['parameters']['path']\n  ) => ReturnType<RequestInstance['DELETE']>;\n  getBillingKeys: (\n    body: components['schemas']['GetBillingKeyInfosBody']\n  ) => ReturnType<RequestInstance['GET']>;\n  issueBillingKey: (\n    body: paths['/billing-keys']['post']['requestBody']['content']['application/json']\n  ) => ReturnType<RequestInstance['POST']>;\n} => {\n  return {\n    /**\n     * 빌링키 단건 조회\n     *\n     * @description 빌링키 단건 조회\n     * 주어진 빌링키에 대응되는 빌링키 정보를 조회합니다.\n     */\n    getBillingKey: (\n      params: paths['/billing-keys/{billingKey}']['get']['parameters']['path']\n    ) => {\n      return _request.GET('/billing-keys/{billingKey}', {\n        params: {\n          path: {billingKey: params.billingKey},\n          query: {storeId: options?.storeId},\n        },\n      });\n    },\n    /**\n     * 빌링키 삭제\n     *\n     * @description 빌링키 삭제\n     * 빌링키를 삭제합니다.\n     */\n    deleteBillingKey: (\n      params: paths['/billing-keys/{billingKey}']['delete']['parameters']['path']\n    ) => {\n      return _request.DELETE('/billing-keys/{billingKey}', {\n        params: {\n          path: {billingKey: params.billingKey},\n          query: {storeId: options?.storeId},\n        },\n      });\n    },\n    /**\n     * 빌링키 다건 조회\n     *\n     * @description 빌링키 다건 조회\n     * 주어진 조건에 맞는 빌링키들을 페이지 기반으로 조회합니다.\n     */\n    getBillingKeys: (body: components['schemas']['GetBillingKeyInfosBody']) => {\n      return _request.GET('/billing-keys', {\n        body: {\n          ...body,\n          filter: {\n            ...body.filter,\n            storeId: body.filter?.storeId || options?.storeId || undefined,\n          },\n        },\n      });\n    },\n    /**\n     * 빌링키 발급\n     *\n     * @description 빌링키 발급\n     * 빌링키 발급을 요청합니다.\n     */\n    issueBillingKey: (\n      body: paths['/billing-keys']['post']['requestBody']['content']['application/json']\n    ) => {\n      return _request.POST('/billing-keys', {\n        body: {\n          ...body,\n          storeId: body.storeId || options?.storeId || undefined,\n        },\n      });\n    },\n  };\n};\n","import type {RequestInstance} from '../common/request';\nimport type {paths} from '../types/v2'; // generated by openapi-typescript\n\n/**\n * 현금 영수증 관련 API\n *\n * @description 현금 영수증과 관련된 API 기능을 제공합니다.\n */\nexport const cashReceipts = (\n  _request: RequestInstance,\n  options?: {storeId?: string}\n): {\n  getCashReceipt: (\n    params: paths['/payments/{paymentId}/cash-receipt']['get']['parameters']['path']\n  ) => ReturnType<RequestInstance['GET']>;\n  issueCashReceipt: (\n    body: paths['/cash-receipts']['post']['requestBody']['content']['application/json']\n  ) => ReturnType<RequestInstance['POST']>;\n  cancelCashReceipt: (\n    params: paths['/payments/{paymentId}/cash-receipt/cancel']['post']['parameters']['path']\n  ) => ReturnType<RequestInstance['POST']>;\n} => {\n  return {\n    /**\n     * 현금 영수증 단건 조회\n     *\n     * @description 현금 영수증 단건 조회\n     * 주어진 결제 아이디에 대응되는 현금 영수증 내역을 조회합니다.\n     */\n    getCashReceipt: (\n      params: paths['/payments/{paymentId}/cash-receipt']['get']['parameters']['path']\n    ) => {\n      return _request.GET('/payments/{paymentId}/cash-receipt', {\n        params: {\n          path: {paymentId: params.paymentId},\n          query: {storeId: options?.storeId},\n        },\n      });\n    },\n    /**\n     * 현금 영수증 수동 발급\n     *\n     * @description 현금 영수증 수동 발급\n     * 현금 영수증 발급을 요청합니다.\n     */\n    issueCashReceipt: (\n      body: paths['/cash-receipts']['post']['requestBody']['content']['application/json']\n    ) => {\n      return _request.POST('/cash-receipts', {\n        body: {\n          ...body,\n          storeId: body.storeId || options?.storeId || undefined,\n        },\n      });\n    },\n    /**\n     * 현금 영수증 취소\n     *\n     * @description 현금 영수증 취소\n     * 현금 영수증 취소를 요청합니다.\n     */\n    cancelCashReceipt: (\n      params: paths['/payments/{paymentId}/cash-receipt/cancel']['post']['parameters']['path']\n    ) => {\n      return _request.POST('/payments/{paymentId}/cash-receipt/cancel', {\n        params: {\n          path: {paymentId: params.paymentId},\n          query: {storeId: options?.storeId},\n        },\n      });\n    },\n  };\n};\n","import type {RequestInstance} from '../common/request';\nimport type {paths} from '../types/v2'; // generated by openapi-typescript\n\n/**\n * 본인인증 관련 API\n *\n * @description 본인인증과 관련된 API 기능을 제공합니다.\n */\nexport const identityVerifications = (\n  _request: RequestInstance,\n  options?: {storeId?: string}\n): {\n  getIdentityVerification: (\n    params: paths['/identity-verifications/{identityVerificationId}']['get']['parameters']['path']\n  ) => ReturnType<RequestInstance['GET']>;\n  sendIdentityVerification: (\n    body: paths['/identity-verifications/{identityVerificationId}/send']['post']['parameters']['path'] &\n      paths['/identity-verifications/{identityVerificationId}/send']['post']['requestBody']['content']['application/json']\n  ) => ReturnType<RequestInstance['POST']>;\n  confirmIdentityVerification: (\n    body: paths['/identity-verifications/{identityVerificationId}/confirm']['post']['parameters']['path'] &\n      paths['/identity-verifications/{identityVerificationId}/confirm']['post']['requestBody']['content']['application/json']\n  ) => ReturnType<RequestInstance['POST']>;\n  resendIdentityVerification: (\n    params: paths['/identity-verifications/{identityVerificationId}/resend']['post']['parameters']['path']\n  ) => ReturnType<RequestInstance['POST']>;\n} => {\n  return {\n    /**\n     * 본인인증 단건 조회\n     *\n     * @description 본인인증 단건 조회\n     * 주어진 아이디에 대응되는 본인인증 내역을 조회합니다.\n     */\n    getIdentityVerification: (\n      params: paths['/identity-verifications/{identityVerificationId}']['get']['parameters']['path']\n    ) => {\n      return _request.GET('/identity-verifications/{identityVerificationId}', {\n        params: {\n          path: {identityVerificationId: params.identityVerificationId},\n          query: {storeId: options?.storeId},\n        },\n      });\n    },\n    /**\n     * 본인인증 요청 전송\n     *\n     * @description 본인인증 요청 전송\n     * SMS 또는 APP 방식을 이용하여 본인인증 요청을 전송합니다.\n     */\n    sendIdentityVerification: (\n      body: paths['/identity-verifications/{identityVerificationId}/send']['post']['parameters']['path'] &\n        paths['/identity-verifications/{identityVerificationId}/send']['post']['requestBody']['content']['application/json']\n    ) => {\n      const {identityVerificationId, ...processedBody} = body;\n\n      return _request.POST(\n        '/identity-verifications/{identityVerificationId}/send',\n        {\n          params: {\n            path: {identityVerificationId},\n          },\n          body: {\n            ...processedBody,\n            storeId: processedBody.storeId || options?.storeId || undefined,\n          },\n        }\n      );\n    },\n    /**\n     * 본인인증 확인\n     *\n     * @description 본인인증 확인\n     * 요청된 본인인증에 대한 확인을 진행합니다.\n     */\n    confirmIdentityVerification: (\n      body: paths['/identity-verifications/{identityVerificationId}/confirm']['post']['parameters']['path'] &\n        paths['/identity-verifications/{identityVerificationId}/confirm']['post']['requestBody']['content']['application/json']\n    ) => {\n      const {identityVerificationId, ...processedBody} = body;\n\n      return _request.POST(\n        '/identity-verifications/{identityVerificationId}/confirm',\n        {\n          params: {\n            path: {identityVerificationId},\n          },\n          body: {\n            ...processedBody,\n            storeId: processedBody.storeId || options?.storeId || undefined,\n          },\n        }\n      );\n    },\n    /**\n     * SMS 본인인증 요청 재전송\n     *\n     * @description SMS 본인인증 요청 재전송\n     * SMS 본인인증 요청을 재전송합니다.\n     */\n    resendIdentityVerification: (\n      params: paths['/identity-verifications/{identityVerificationId}/resend']['post']['parameters']['path']\n    ) => {\n      return _request.POST(\n        '/identity-verifications/{identityVerificationId}/resend',\n        {\n          params: {\n            path: {identityVerificationId: params.identityVerificationId},\n            query: {storeId: options?.storeId},\n          },\n        }\n      );\n    },\n  };\n};\n","import type {RequestInstance} from '../common/request';\nimport type {paths} from '../types/v2'; // generated by openapi-typescript\n\n/**\n * 특정 PG사 관련 API\n *\n * @description 특정 PG사에 국한된 API 기능을 제공합니다.\n */\nexport const forSpecificPg = (\n  _request: RequestInstance\n): {\n  getKakaopayPaymentOrder: (\n    query: paths['/kakaopay/payment/order']['get']['parameters']['query']\n  ) => ReturnType<RequestInstance['GET']>;\n} => {\n  return {\n    /**\n     * 카카오페이 주문 조회 API\n     *\n     * @description 카카오페이 주문 조회 API\n     * 주어진 아이디에 대응되는 카카오페이 주문 건을 조회합니다.\n     * 해당 API 사용이 필요한 경우 포트원 기술지원팀으로 문의 주시길 바랍니다.\n     */\n    getKakaopayPaymentOrder: (\n      query: paths['/kakaopay/payment/order']['get']['parameters']['query']\n    ) => {\n      return _request.GET('/kakaopay/payment/order', {\n        params: {query},\n      });\n    },\n  };\n};\n","import {DEFAULT_HOST} from './common/constants';\nimport createRequestInstance, {type RequestInstance} from './common/request';\n\n// Import all API functions\nimport {auth} from './lib/auth'; // 인증 관련 API\nimport {payments} from './lib/payments'; // 결제 관련 API\nimport {escrow} from './lib/escrow'; // 에스크로 관련 API\nimport {paymentSchedules} from './lib/payment-schedules'; // 결제 예약 관련 API\nimport {billingKeys} from './lib/billing-keys'; // 빌링키 관련 API\nimport {cashReceipts} from './lib/cash-receipts'; // 현금 영수증 관련 API\nimport {identityVerifications} from './lib/identity-verifications'; // 본인인증 관련 API\nimport {forSpecificPg} from './lib/pg-specific'; // 특정 PG사 관련 API (카카오페이)\n\n/**\n * PortOne RestAPI v2 SDK Class.\n *\n * @param {object} authorization - Object that includes authorization data.\n * @param {string} authorization.type - Type of authorization.\n * @param {string} authorization.secret - Secret key or access token.\n * @param {string} host - Host URL.\n *\n * @default authorization.type = \"SECRET\"\n * @default host = \"https://api.portone.io\"\n *\n * @example\n * const portOne = new PortOne()\n */\nexport class PortOne {\n  host: string;\n  authorization?: {\n    type: 'SECRET' | 'ACCESS_TOKEN';\n    secret: string;\n  };\n  storeId?: string;\n\n  public declare auth: ReturnType<typeof auth>;\n  public declare payments: ReturnType<typeof payments>;\n  public declare escrow: ReturnType<typeof escrow>;\n  public declare paymentSchedules: ReturnType<typeof paymentSchedules>;\n  public declare billingKeys: ReturnType<typeof billingKeys>;\n  public declare cashReceipts: ReturnType<typeof cashReceipts>;\n  public declare identifyVerifications: ReturnType<\n    typeof identityVerifications\n  >;\n  public declare forSpecificPg: ReturnType<typeof forSpecificPg>;\n\n  private declare _request: RequestInstance;\n\n  constructor(options?: {host: string}) {\n    this.host = options?.host || DEFAULT_HOST;\n    this._request = createRequestInstance(\n      this.host,\n      undefined,\n      true // withoutAuthorization\n    );\n\n    this._init();\n  }\n\n  private _init() {\n    // init all API functions\n    const initializationParams = {\n      storeId: this.storeId || undefined,\n    };\n\n    this.auth = auth(this._request);\n    this.payments = payments(this._request, initializationParams);\n    this.escrow = escrow(this._request, initializationParams);\n    this.paymentSchedules = paymentSchedules(\n      this._request,\n      initializationParams\n    );\n    this.billingKeys = billingKeys(this._request, initializationParams);\n    this.cashReceipts = cashReceipts(this._request, initializationParams);\n    this.identifyVerifications = identityVerifications(\n      this._request,\n      initializationParams\n    );\n    this.forSpecificPg = forSpecificPg(this._request);\n  }\n\n  public async login(options: {\n    authorization: {\n      type: 'SECRET' | 'ACCESS_TOKEN';\n      secret: string;\n    };\n    storeId?: string;\n  }) {\n    /**\n     * Set default values.\n     */\n\n    this.storeId = options.storeId;\n\n    if (options.authorization.type === 'ACCESS_TOKEN') {\n      const token = await this._request.POST('/login/api-secret', {\n        body: {\n          apiSecret: options.authorization.secret,\n        },\n      });\n\n      if (!token.data?.accessToken || token.error)\n        throw new Error(\n          token.error\n            ? `${token.error?.type}: ${token.error?.message}`\n            : 'Failed to get access token'\n        );\n\n      this.authorization = {\n        secret: token.data.accessToken,\n        type: options.authorization.type || 'SECRET',\n      };\n\n      this._request = createRequestInstance(\n        this.host,\n        `Bearer ${this.authorization.secret}`\n      );\n    } else {\n      this.authorization = options.authorization;\n      this._request = createRequestInstance(\n        this.host,\n        `PortOne ${this.authorization.secret}`\n      );\n    }\n\n    this._init();\n  }\n}\n\nexport default PortOne;\n"]}